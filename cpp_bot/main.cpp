#include <csignal>
#include <cstdio>
#include <cstdlib>
#include <exception>
#include <string>
#include <tgbot/tgbot.h>
#include <map>
#include <curl/curl.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <nlohmann/json.hpp>

std::map<long long int, bool> waitingForPhoto;

size_t write_callback(char *contents, size_t size, size_t nmemb, std::string *userp) {
    userp->append((char*)contents, size * nmemb);
    return size * nmemb;
}

int main() {
    const char* token_env = getenv("TELEGRAM_BOT_TOKEN");
    if (token_env == nullptr) {
        std::cerr << "–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞." << std::endl;
        return 1;
    }
    std::string token(token_env);

    const char* server_url_env = getenv("SERVER_URL");
    if (server_url_env == nullptr) {
        std::cerr << "–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è SERVER_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞." << std::endl;
        return 1;
    }
    const std::string serverUrl(server_url_env);
    TgBot::Bot bot(token);

    std::vector<TgBot::BotCommand::Ptr> commands;
    TgBot::BotCommand::Ptr commandStart(new TgBot::BotCommand);
    commandStart->command = "start";
    commandStart->description = "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º";
    commands.push_back(commandStart);
    bot.getApi().setMyCommands(commands);

    TgBot::InlineKeyboardMarkup::Ptr startKeyboard(new TgBot::InlineKeyboardMarkup);
    std::vector<TgBot::InlineKeyboardButton::Ptr> startKeyboardRow1;
    TgBot::InlineKeyboardButton::Ptr identifyButton(new TgBot::InlineKeyboardButton);
    identifyButton->text = "‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–æ–ª–µ–∑–Ω—å –ø–æ —Ñ–æ—Ç–æ";
    identifyButton->callbackData = "identify_illness";
    startKeyboardRow1.push_back(identifyButton);
    startKeyboard->inlineKeyboard.push_back(startKeyboardRow1);

    std::vector<TgBot::InlineKeyboardButton::Ptr> startKeyboardRow2;
    TgBot::InlineKeyboardButton::Ptr aboutDevelopersButton(new TgBot::InlineKeyboardButton);
    aboutDevelopersButton->text = "‚ÑπÔ∏è –û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö";
    aboutDevelopersButton->callbackData = "about";
    startKeyboardRow2.push_back(aboutDevelopersButton);
    startKeyboard->inlineKeyboard.push_back(startKeyboardRow2);

    TgBot::InlineKeyboardMarkup::Ptr afterPhotoKeyboard(new TgBot::InlineKeyboardMarkup);
    std::vector<TgBot::InlineKeyboardButton::Ptr> afterPhotoKeyboardRow1;
    afterPhotoKeyboardRow1.push_back(identifyButton);
    afterPhotoKeyboard->inlineKeyboard.push_back(afterPhotoKeyboardRow1);

    bot.getEvents().onCommand("start", [&bot, &startKeyboard](TgBot::Message::Ptr message) {
        std::string text = "–ü—Ä–∏–≤–µ—Ç! üåø\n\n–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫-—Å–∞–¥–æ–≤–æ–¥.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ –±–æ–ª–µ–∑–Ω—å –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–µ—á–µ–Ω–∏—é.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.";
        bot.getApi().sendMessage(message->chat->id, text, nullptr, 0, startKeyboard);
    });

    bot.getEvents().onCallbackQuery([&bot, &startKeyboard](TgBot::CallbackQuery::Ptr query) {
        if (query->data == "identify_illness") {
            bot.getApi().sendMessage(query->message->chat->id, "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ—Ä–∞–∂–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ —á–µ—Ç–∫–∏–º –∏ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.");
            waitingForPhoto[query->message->chat->id] = true;
        } else if (query->data == "about") {
            bot.getApi().sendMessage(query->message->chat->id, "–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π \"–ö—Ç–æ. –ú—ã\"");
        }
    });

    bot.getEvents().onAnyMessage([&bot, &afterPhotoKeyboard, &serverUrl](TgBot::Message::Ptr message) {
        if (message->text.length() > 0 && StringTools::startsWith(message->text, "/start")) {
            return;
        }
        long long int chatId = message->chat->id;
        if (waitingForPhoto.count(chatId) && waitingForPhoto[chatId]) {
            if (!message->photo.empty()) {
                waitingForPhoto[chatId] = false;
                
                bot.getApi().sendMessage(chatId, "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑... ‚è≥");

                TgBot::PhotoSize::Ptr photo = message->photo.back();
                TgBot::File::Ptr file = bot.getApi().getFile(photo->fileId);
                std::string fileContent = bot.getApi().downloadFile(file->filePath);

                CURL *curl;
                CURLcode res;
                std::string readBuffer;
                long http_code = 0;

                curl_global_init(CURL_GLOBAL_DEFAULT);
                curl = curl_easy_init();
                if (curl) {
                    curl_mime *form = curl_mime_init(curl);
                    curl_mimepart *field = curl_mime_addpart(form);

                    curl_mime_name(field, "image");
                    curl_mime_filename(field, "photo.jpg");
                    curl_mime_data(field, fileContent.data(), fileContent.size());

                    curl_easy_setopt(curl, CURLOPT_URL, serverUrl.c_str());
                    curl_easy_setopt(curl, CURLOPT_MIMEPOST, form);
                    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);
                    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);

                    res = curl_easy_perform(curl);
                    curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);
                    
                    std::cout << "HTTP –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: " << http_code << std::endl;

                    if (res == CURLE_OK && http_code == 200) {
                        std::cout << "–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª: " << readBuffer << std::endl;
                        try {
                            auto jsonResponse = nlohmann::json::parse(readBuffer);
                            std::string diseaseName = jsonResponse.value("disease_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
                            std::stringstream response_ss;
                            if (diseaseName == "–ë–æ–ª–µ–∑–Ω—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞") {
                                response_ss << "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: –ë–æ–ª–µ–∑–Ω—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞* üòû\n\n";
                                response_ss << "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–æ–ª–µ–∑–Ω—å –ø–æ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. "
                                            << "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º, –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏, "
                                            << "—Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–≤—à–∏—Å—å –Ω–∞ –ø–æ—Ä–∞–∂–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è. –ò–Ω–æ–≥–¥–∞ —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç!\n\n";
                                response_ss << "‚ùóÔ∏è *–í–∞–∂–Ω–∞—è –ø–∞–º—è—Ç–∫–∞:*\n";
                                response_ss << "_" << jsonResponse.value("memo", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.") << "_\n";
                            } else {
                                response_ss << "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: " << diseaseName << "*\n\n";

                                if (jsonResponse.contains("treatment") && !jsonResponse["treatment"].empty()) {
                                    response_ss << "üíä *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–µ—á–µ–Ω–∏—é:*\n";
                                    for (const auto& step : jsonResponse["treatment"]) {
                                        response_ss << "‚Ä¢ " << step.get<std::string>() << "\n";
                                    }
                                    response_ss << "\n";
                                }
                                if (jsonResponse.contains("prevention") && !jsonResponse["prevention"].empty()) {
                                    response_ss << "üõ°Ô∏è *–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞:*\n";
                                    for (const auto& step : jsonResponse["prevention"]) {
                                        response_ss << "‚Ä¢ " << step.get<std::string>() << "\n";
                                    }
                                    response_ss << "\n";
                                }
                                if (jsonResponse.contains("memo") && !jsonResponse["memo"].empty()) {
                                    response_ss << "‚ùóÔ∏è *–í–∞–∂–Ω–∞—è –ø–∞–º—è—Ç–∫–∞:*\n";
                                    response_ss << "_" << jsonResponse["memo"].get<std::string>() << "_\n";
                                }
                            }
                            bot.getApi().sendMessage(chatId, response_ss.str(), nullptr, 0, afterPhotoKeyboard, "Markdown");
                        } catch (const nlohmann::json::parse_error& e) {
                            std::cerr << "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: " << e.what() << std::endl;
                            bot.getApi().sendMessage(chatId, "–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                        }
                    } else {
                        std::cerr << "–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É (–∫–æ–¥ " << http_code << "): " << readBuffer << std::endl;
                        bot.getApi().sendMessage(chatId, "–£–ø—Å! –°–µ—Ä–≤–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                    }

                    curl_mime_free(form);
                    curl_easy_cleanup(curl);
                }
                curl_global_cleanup();
            } else {
                bot.getApi().sendMessage(chatId, "–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.");
            }
        } else {
            if(message->text.length() > 0) {
                bot.getApi().sendMessage(chatId, "–Ø –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–æ–ª–µ–∑–Ω—å –ø–æ —Ñ–æ—Ç–æ\".");
            }
        }
    });
    signal(SIGINT, [](int s) {
        std::cout << "SIGINT –ø–æ–ª—É—á–µ–Ω–æ, –±–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.\n";
        exit(0);
    });

    try {
        printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s\n", bot.getApi().getMe()->username.c_str());
        bot.getApi().deleteWebhook();

        TgBot::TgLongPoll longPoll(bot);
        while (true) {
            longPoll.start();
        }
    } catch (std::exception& e) {
        std::cerr << "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " << e.what() << std::endl;
    }
    return 0;
}