from fastapi import FastAPI, File, UploadFile
from model.gardener_model import VirtualGardener
from pydantic import BaseModel

DISEASE_INFO = {
    "blight": {
        "name": "Фитофтороз",
        "treatment": [
            "Отрежьте пораженные листья и стебли.",
            "Обработайте растение фунгицидами (\"Фитоспорин-М\" или раствор медного купороса)."
        ],
        "prevention": [
            "Соблюдайте севооборот (при посадке новых растений не используйте почву от других растений)."
        ]
    },
    "curl": {
        "name": "Курчавость листьев",
        "treatment": [
            "Отрежьте пораженные листья.",
            "Обработайте растения фунгицидами (раствор медного купороса/бордоской жидкости или \"Хорус\"/\"Скор\"/\"Топсин-М\")."
        ],
        "prevention": []
    },
    "green-mite": {
        "name": "Заражение клещами",
        "treatment": [
            "Обработка растения биологическими препаратами (например, \"Фитоверм\" или \"Матрин Био\")."
        ],
        "prevention": [
            "Поддерживайте достаточную влажность в помещении.",
            "При пересадке растений всегда используйте свежую землю.",
            "При посадке новых растений сначала помещайте их на несколько дней отдельно от других растений и наблюдайте за ними."
        ]
    },
    "leaf-miner": {
        "name": "Заражение минёрами",
        "treatment": [
            "Введите в ствол растения инсектициды (\"Имисайд\"/\"Абасайд\").",
            "Отрежьте пораженные листья."
        ],
        "prevention": []
    },
    "leaf-spot": {
        "name": "Пятнистость листьев",
        "treatment": [
            "Отрежьте пораженные листья.",
            "Обработайте растение фунгицидами (раствор медного купороса или \"Скор\"/\"Топаз\")."
        ],
        "prevention": [
            "Избегайте переувлажнения листьев и почвы.",
            "Соблюдайте севооборот (при посадке новых растений не используйте почву от других растений)."
        ]
    },
    "powdery": {
        "name": "Мучнистая роса",
        "treatment": [
            "Обработайте растения фунгицидами (\"Топаз\"/\"Чистоцвет\" или раствор бордоской жидкости).",
            "Отрежьте пораженные листья."
        ],
        "prevention": []
    },
    "rust": {
        "name": "Заражение пукциниевыми грибами (Ржавчина)",
        "treatment": [
            "Обработайте растения фунгицидами (\"Брапикс\"/\"Триактив\")."
        ],
        "prevention": [
            "Соблюдайте севооборот (при посадке новых растений не используйте почву от других растений)."
        ]
    },
    "septoria": {
        "name": "Септориоз",
        "treatment": [
            "Отрежьте пораженные листья.",
            "Обработайте растения фунгицидами (раствор бордоской жидкости или \"Скор\"/\"Абига-Пиком\")."
        ],
        "prevention": [
            "Соблюдайте севооборот."
        ]
    },
    "streak-virus": {
        "name": "Вирус полосатости",
        "treatment": [
            "Выкопайте пораженные растения."
        ],
        "prevention": [
            "Соблюдайте севооборот (при посадке новых растений не используйте почву от других растений).",
            "Избегайте избыточного полива растений."
        ]
    },
    "healthy": {
        "name": "Растение здорово",
        "treatment": [
            "Продолжайте ухаживать за растением, как обычно."
        ],
        "prevention": [
            "Обеспечьте растению достаточно света и воды.",
            "Регулярно осматривайте растение на предмет появления вредителей или признаков болезней.",
            "Поддерживайте оптимальную влажность и температуру воздуха."
        ]
    }
}

MEMO = (
    "Перед применением препаратов прочитайте инструкцию - некоторые из них можно применять только на открытом воздухе.\n"
    "Названия препаратов приведены для предоставления информации о группах препаратов, предлагаемых к применению, и не являются рекламой.\n"
    "Рекомендации не являются консультацией с экспертами-фитопатологами."
)

app = FastAPI()

PREDICTIONS_PATH = "predictions"
model = VirtualGardener(path_to_save=PREDICTIONS_PATH)

class PredictionResponse(BaseModel):
    disease_name: str
    treatment: list[str]
    prevention: list[str]
    memo: str

@app.post("/predict", response_model=PredictionResponse)
async def predict_image(image: UploadFile = File(...)):
    """
    Принимает изображение, предсказывает класс и возвращает полную информацию о болезни.
    """
    image_data = await image.read()
    class_name = model.predict(image_data=image_data)

    info = DISEASE_INFO.get(class_name, {
        "name": "Болезнь не распознана",
        "treatment": ["Попробуйте сделать более качественное фото."],
        "prevention": []
    })

    return {
        "disease_name": info["name"],
        "treatment": info["treatment"],
        "prevention": info["prevention"],
        "memo": MEMO
    }
